---
interface Props {
  text: string;
  className?: string;
}

const { text, className } = Astro.props;
---

<div class="sectionTitle js-sectionTitle">
  <div class="l-container">
    <h2 lang="en" class:list={['sectionTitle__inner', className]}>
      <span class="sectionTitle__text">{text}</span>
    </h2>
  </div>
</div>

<style lang="scss">
  @use '../assets/scss/global' as *;

  .sectionTitle {
    overflow: hidden;
  }

  .sectionTitle__inner {
    display: flex;
    align-items: center;
    column-gap: rem(16);

    @include mq(md) {
      column-gap: rem(32);
    }

    &::after {
      content: '';
      display: inline-block;
      width: 100vw;
      height: 1px;
      margin-right: calc(50% - 50vw);
      overflow: hidden;
      opacity: 0;
      background-color: var(--main-color);
    }

    &.-reverse {
      flex-direction: row-reverse;

      &::after {
        margin-right: 0;
        margin-left: calc(50% - 50vw);
      }
    }
  }

  .sectionTitle__text {
    visibility: hidden;
    font-size: fluid(44, 88, var(--sp-comp-width), 1920);
    line-height: 1.2;
  }

  // Animation
  // -------------------------
  .is-visible {
    .sectionTitle__inner {
      &::after {
        transform-origin: center left;
        animation: lineAnimation 0.8s var(--easing) 0.2s both;
      }

      .sectionTitle__text {
        --inset-value: 0 100% 0 0;

        animation: textAnimation 0.3s linear forwards;
      }
    }

    .sectionTitle__inner.-reverse {
      &::after {
        transform-origin: center right;
      }

      .sectionTitle__text {
        --inset-value: 0 0 0 100%;
      }
    }
  }

  @keyframes textAnimation {
    0% {
      transform: translateX(-5%);
      clip-path: inset(var(--inset-value));
      filter: blur(5px);
    }

    100% {
      visibility: visible;
      transform: translateX(0);
      clip-path: inset(0);
      filter: blur(0);
    }
  }

  @keyframes lineAnimation {
    0% {
      transform: scaleX(0);
      opacity: 0;
    }

    40% {
      opacity: 0.5;
    }

    100% {
      transform: scaleX(1);
      opacity: 1;
    }
  }
</style>

<script>
  import { SetObserver } from '../assets/js/setObserver';

  const titleAnimation = (entries, observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('is-visible');
        observer.unobserve(entry.target);
      }
    });
  };
  new SetObserver('.js-sectionTitle', titleAnimation, { rootMargin: '0px 0px -20% 0px', thredshold: 1 });
</script>

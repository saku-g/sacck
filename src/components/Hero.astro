---
import { LINKS } from '../config';
---

<div class="hero" id="js-hero">
  <div class="hero__body">
    <h1 class="hero__title" lang="en">
      <span class="hero__animation">Yusaku Hori</span>
    </h1>
    <div class="u-pl-1">
      <p class="hero__text" lang="en">
        <span class="hero__animation" style={`--delay:0.4s`}>Born in 1993, lives in Hiroshima.</span><br />
        <span class="hero__animation" style={`--delay:0.4s`}>I'm learning to become a web coder.</span>
      </p>
      <div class="hero__completed" style={`--delay:0.3s`}>
        <ul class="hero__buttonWrapper">
          <li>
            <a class="hero__button" href={LINKS.github} target="_blank" rel="noopener noreferrer">
              <svg aria-hidden="true">
                <use href="#github"></use>
              </svg>
            </a>
          </li>
          <li>
            <a class="hero__button" href="mailto:sakucode1993@gmail.com">
              <span class="u-visuallyHidden">メールを送る</span>
              <svg aria-hidden="true">
                <use href="#mail"></use>
              </svg>
            </a>
          </li>
        </ul>
      </div>
    </div>
  </div>
  <div class="hero__completed" style={`--delay:0.8s`}>
    <div class="hero__bottom" aria-hidden="true">
      <div class="hero__scroll">
        <span lang="en">Scroll Down</span>
      </div>
    </div>
  </div>
</div>

<style lang="scss">
  @use '../assets/scss/global' as *;

  .hero {
    display: flex;
    position: relative;
    align-items: center;
    max-width: 1200px;
    height: 100vh;
    height: 100svh;
    margin-top: calc(rem(var(--header-height)) * -1);
    margin-inline: auto;
    padding-inline: var(--content-gutter-x);
  }

  .hero__title {
    font-size: fluid(80, 128, var(--sp-comp-width), var(--pc-comp-width));
    letter-spacing: 0.03em;
    line-height: 0.95;
  }

  .hero__text {
    margin-top: rem(16);
    line-height: 1.25;

    @include mq(md) {
      font-size: rem(24);
    }
  }

  .hero__buttonWrapper {
    display: flex;
    align-items: center;
    gap: 4px;
    margin-top: rem(40);
  }

  .hero__button {
    --size: 2.5rem;

    display: block;
    width: var(--size);
    height: var(--size);
    padding: 4px;
    border-radius: 50%;

    @include hover {
      outline: 1px dashed currentcolor;
    }

    svg {
      width: 100%;
      height: 100%;
    }
  }

  .hero__bottom {
    position: absolute;
    bottom: 0;
    left: 50%;
    margin: auto;
    transform: translateX(-50%);
  }

  .hero__scroll {
    display: flex;
    flex-direction: column;
    align-items: center;
    row-gap: rem(4);
    font-size: rem(12);

    @include mq(md) {
      font-size: rem(14);
    }

    &::after {
      content: '';
      display: block;
      width: 1px;
      height: rem(80);
      transform: scaleY(0);
      transform-origin: top;
      animation: scrollDown 2s ease-out infinite;
      background-color: currentcolor;
    }
  }

  @keyframes scrollDown {
    0% {
      transform: scaleY(0);
    }

    25% {
      transform: scaleY(1);
      transform-origin: top;
    }

    50% {
      transform: scaleY(1);
      transform-origin: bottom;
    }

    70% {
      transform: scaleY(0);
      transform-origin: bottom;
    }

    100% {
      transform-origin: top;
    }
  }

  // Animation
  // -------------------------
  .hero__animation {
    --delay: 0s;

    display: inline-block;
    clip-path: inset(0 100% 0 0);
    transition: clip-path 0.6s var(--easing) var(--delay);

    .is-animated & {
      clip-path: inset(0 0 0 0);
    }
  }

  // Completed
  // -------------------------
  // テキストアニメーション終了後に、ボタンとスクロールを表示
  .hero__completed {
    --delay: 0s;

    transition: opacity 0.3s var(--easing) var(--delay);
    opacity: 0;

    .is-completed & {
      opacity: 1;
    }
  }

  // heroセクションが見えなくなったら、スクロールアニメーションを一時停止
  html.is-heroOver .hero__scroll::after {
    animation: none;
  }
</style>

<script>
  import { SetObserver } from '../assets/js/setObserver';

  /**
   * heroセクションを監視する関数
   * @param entries - 監視対象要素
   */
  const heroObserve = (entries) => {
    if (!entries[0].isIntersecting) {
      document.documentElement.classList.add('is-heroOver');
    } else {
      entries[0].target.classList.add('is-animated');
      document.documentElement.classList.remove('is-heroOver');
    }
    entries[0].target.addEventListener('transitionend', () => {
      entries[0].target.classList.add('is-completed');
    });
  };
  new SetObserver('#js-hero', heroObserve);
</script>

---
// Data
import { WORKS_CONTENTS } from '../worksContents';

// Image
import { Picture } from 'astro:assets';
import imgWorks1 from '../assets/img/works-1.jpg';
import imgWorks2 from '../assets/img/works-2.jpg';
import imgWorks3 from '../assets/img/works-3.jpg';
import imgWorks4 from '../assets/img/works-4.jpg';
import imgWorks5 from '../assets/img/works-5.jpg';
import imgWorks6 from '../assets/img/works-6.jpg';
import imgWorks7 from '../assets/img/works-7.jpg';
import imgWorks8 from '../assets/img/works-8.jpg';

const sliderData = [
  { id: WORKS_CONTENTS[0].id, src: imgWorks1, url: WORKS_CONTENTS[0].url },
  { id: WORKS_CONTENTS[1].id, src: imgWorks2, url: WORKS_CONTENTS[1].url },
  { id: WORKS_CONTENTS[2].id, src: imgWorks3, url: WORKS_CONTENTS[2].url },
  { id: WORKS_CONTENTS[3].id, src: imgWorks4, url: WORKS_CONTENTS[3].url },
  { id: WORKS_CONTENTS[4].id, src: imgWorks5, url: WORKS_CONTENTS[4].url },
  { id: WORKS_CONTENTS[5].id, src: imgWorks6, url: WORKS_CONTENTS[5].url },
  { id: WORKS_CONTENTS[6].id, src: imgWorks7, url: WORKS_CONTENTS[6].url },
  { id: WORKS_CONTENTS[7].id, src: imgWorks8, url: WORKS_CONTENTS[7].url },
];
---

<div class="l-container">
  <div class="works">
    <div class="works__sliderWrapper" data-animated="fadeIn" style={`--delay:0.3s`}>
      <div class="swiper works__mainSlider" id="main-slider">
        <ul class="swiper-wrapper">
          {
            sliderData.map(({ id, src }) => (
              <li class="swiper-slide" data-slide-id={id}>
                <figure>
                  <Picture src={src} formats={['avif', 'webp']} alt="" />
                </figure>
              </li>
            ))
          }
        </ul>
      </div>
      <div class="swiper works__thumbSlider" id="thumbnail-slider">
        <ul class="swiper-wrapper">
          {
            sliderData.map(({ id,src }) => (
              <li class="swiper-slide" data-slide-id={id}>
                <button type="button" aria-label={`スライド${id}の画像を表示する`}>
                  <Picture src={src} formats={['avif', 'webp']} alt="" />
                </button>
              </li>
            ))
          }
        </ul>
      </div>
    </div>
    <!-- /.works__sliderWrapper -->
    <section class="works__body">
      {
        WORKS_CONTENTS.map(({ id, title, created, period, role, url, description, authentication, coding_practice }) => (
          <div
            id={`worksContent-${id}`} class="works__content js-worksContent" data-animated="blurInUp" style={`--delay: 0.4s;`}>
            <h3 class="works__title">{title}</h3>
            <p class="u-mt-1">
              <a class="works__link" href={url} target="_blank" rel="noopener noreferrer">
                <svg aria-hidden="true">
                  <use href="#link" />
                </svg>
                {url}
              </a>
            </p>
            <dl class="works__list">
              <dt>制作年月日</dt>
              <dd>{created}</dd>
              <dt>制作期間</dt>
              <dd>{period}</dd>
              <dt>担当範囲</dt>
              <dd>{role}</dd>
              {authentication &&
              <dt>ログイン情報</dt>
              <dd>
                <span class="u-block">ユーザー名: admin</span>
                <span class="u-block">パスワード: pass</span>
              </dd>
              }
            </dl>
            <p class="works__text">{description}</p>
            {coding_practice &&
            <p class="u-mt-3 u-pl-1" style="font-size:.875rem">
              配布元: <a class="works__link" href="https://webdesigner-go.com/coding-practice/" target="_blank" rel="noopener noreferrer">無料コーディング練習所</a>
            </p>
            }
          </div>
        ))
      }
    </section>
  </div>
  <!-- /.works -->
</div>
<!-- /.l-container -->

<style lang="scss">
  @use '../assets/scss/global' as *;

  .works {
    display: grid;
    grid-template-columns: 100%;
    gap: rem(32) 0;
    margin-top: fluid(16, 48, var(--sp-comp-width), var(--pc-comp-width));

    @include mq(md) {
      grid-template-columns: repeat(2, minmax(0,1fr));
      grid-template-rows: auto;
      gap: 0 1rem;
    }
  }

  .works__body {
    @include mq(md) {
      padding-left: calc(32 / 472 * 100%);
    }
  }

  .works__content {
    display: none;

    &.is-show {
      display: block;
    }
  }

  .works__title {
    font-size: rem(20);
    font-weight: 500;
    line-height: 1.25;

    @include mq(lg) {
      font-size: rem(24);
    }
  }

  .works__link {
    padding-block: 2px;
    transition: background-size .3s var(--easing);
    background-image: linear-gradient(90deg, currentcolor, currentcolor);
    background-repeat: no-repeat;
    background-position:  left bottom;
    background-size: 100% 1px;
    word-break: break-all;
    overflow-wrap: break-word;

    @include hover {
      background-size: 0 1px;
    }

    svg {
      --size: 1.25em;

      width: var(--size);
      height: var(--size);
      margin-left: 2px;
      transform: rotate(-45deg);
    }
  }

  .works__list {
    display: grid;
    grid-template-columns: max-content;
    grid-template-rows: 1fr;
    margin-top: 1.5rem;
    padding: 1rem;
    border: 1px solid var(--main-color);
    font-size: rem(14);
    line-height: 1.75;
    gap: rem(10) calc(32 / 440 * 100%);

    @include mq(lg) {
      padding: 1rem rem(24);
    }

    dt {
      grid-column: 1/2;
      font-weight: 400;
    }

    dd {
      grid-column: 2/3;
    }
  }

  .works__text {
    margin-top: 1rem;
    font-size: rem(14);
    line-height: 2;
    white-space: pre-wrap; // \nの改行を有効化

    @include mq(lg) {
      margin-top: 1.5rem;
      padding-inline: rem(8);
    }
  }

  .works__mainSlider img,
  .works__thumbSlider img {
    width: 100%;
    height: 100%;
  }

  .works__mainSlider {
    .swiper-slide img {
      border: 2px solid transparent;
    }

    .swiper-slide-active img {
      border-color: var(--main-color);
    }
  }

  // サムネイルスライダー
  .works__thumbSlider {
    margin-top: rem(8);

    .swiper-wrapper {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 0.5rem;

      @include mq(md) {
        grid-template-columns: repeat(3, 1fr);
      }
    }

    .swiper-slide {
      width: auto !important; // style属性のwidthを打ち消し
      transition: transform .2s linear;
      border: 1px solid rgb(0 0 0 / 10%);
      cursor: pointer;

      // 非アクティブのサムネイル
      &:not(.swiper-slide-thumb-active)::after {
        content: '';
        display: block;
        position: absolute;
        opacity: 0.5;
        background-color: var(--base-color);
        inset: 0;
      }

      // アクティブのサムネイル
      &.swiper-slide-thumb-active {
        transform: scale(.95);
        border-color: var(--main-color);
      }
    }
  }
</style>

<script>
  import Swiper from 'swiper/bundle';

  import 'swiper/css';
  import 'swiper/css/effect-fade';
  import 'swiper/css/scrollbar';

  //
  // Init Swiper
  // --------------------

  // https://swiperjs.com/swiper-api

  const thumbSlider = new Swiper('#thumbnail-slider', {
    allowSlideNext: false,
    allowTouchMove: false,
    keyboard: {
      enabled:true,
      onlyInViewport: true,
    },
    a11y: {
      slideRole: null
    }
  });

  const mainSlider = new Swiper('#main-slider', {
    loop: true,
    effect: 'fade',
    fadeEffect: {
      crossFade: true,
    },
    speed: 500,
    grabCursor: true,
    a11y: {
      slideRole: null
    },
    thumbs: {
      swiper: thumbSlider,
    },
    on: {
      /**
       * 現在表示されているスライドに対応するコンテンツを表示
       * @param swiper mainSlider
       */
      init: (swiper) => {
        const activeSlideId = swiper.slides[swiper.activeIndex].dataset.slideId;
        document.getElementById(`worksContent-${activeSlideId}`).classList.add('is-show');
      },
      /**
       * スライダーが変更したとき、対象のコンテンツに切り替える
       * @param swiper mainSlider
       */
      slideChangeTransitionStart: (swiper) => {
        const contents = document.querySelectorAll('.js-worksContent');

        // すべてのスライダーコンテンツを非表示
        contents.forEach((content) => {
          content.classList.remove('is-show','is-animated');
          content.style.setProperty('--delay', '0.2s');
        });

        // 対象のコンテンツを取得して表示
        const id =  swiper.slides[swiper.activeIndex].dataset.slideId;
        const activeContent = document.getElementById(`worksContent-${id}`);
        activeContent.classList.add('is-show');
      }
    }
  });

  // サムネイルスライダーのキーボード操作を可能にする
  const thumbSliderEl =  document.getElementById('thumbnail-slider');
  thumbSliderEl.addEventListener('keydown', (e) => {
    if (e.code === 'Enter') {
      // focusされたbuttonの親ノードであるスライドを取得
      const activeSlideId = document.activeElement.closest('.swiper-slide').dataset.slideId;
      // メインスライダーをスライド
      mainSlider.slideTo(activeSlideId - 1);
    }
  });
</script>
